# asthma/polyfit.macro (polynomial fit)

polyfit_help 0
 echo "polyfit xvec yvec order report base:"
 echo "        performs a polynomial fit of order $order, on the points of the vectors {xvec} and"
 echo "        {yvec}. The fit parameters will be $a_0, $a_1, ..., $_$order, and they will be write"
 echo "        in the $report.par text file. Then the fit is evaluated over the x-points in the"
 echo "        vector {base} as a new vector {poly}. Adapted from a macro by A. P. Milone."

#######################################################################
polyfit 5 # xvec yvec order report base
#######################################################################

 if ($3 < 1 || $3 > 12) {
   echo Polynomial order $3 out of range 1-12! 
   return
 }

 set lline = $1
 set fline = $2
 set base  = $5

 define order $3
 define scala 1
 
 do i=0, $order { 
   set dimen(a_$i) = dimen(lline) 
 }

 set dimen(sca) = dimen(lline)

 set dimen(me1m) = dimen(lline)
 define me1   (100)
 define scme1 (100)

 do i=0, $order {
   define ga_$i 0. 
 }

 do i=0,dimen(lline)-1 {
   define fun $ga_0
   do j=1,$order {
     define fun  ($fun + $ga_$j*lline[$i]**$j)
   }
   set sca[$i] = fline[$i] - $fun
   set a_0[$i] = 1.
   do j=1, $order {
     set a_$j[$i] = lline[$i]**$j
   }
 }

 mdeclare M $($order + 1)
 set dimen(V) = $($order + 1)

 do i=0,$order {
   do j=0,$order { 
     set M_$i[$j] = sum(lline**($i+$j)) 
   }
   set V[$i] = sum(a_$i*fline)#*fline
 }
 
 minv M
 mmult_v C M V

 do i=0, $order { 
   define a_$i (C[$i]) 
 }

 do i=0,dimen(lline)-1 {
   define fun $a_0
   do j=1,$order { 
     define fun ($fun + $a_$j*lline[$i]**$j)
   }
   set me1m[$i] =  fline[$i] - $fun
 }
                         
 define somma (0)
 do i=0, dimen(lline)-1 {
   define somma ($somma + (me1m[$i])**2) 
 }

 define me1park ($me1)
 define me1 (sqrt(1/((dimen(lline)**2)-5) * $somma))
 define scme1 (abs($me1park - $me1))
 
 set lline1 = 10,39,0.1
 set yu = $a_0

 # log to report file   
 !rm -f $4.par 
 !echo Order: $order >> $4.par 
 !echo a_0 = $a_0 >> $4.par
 do j=1,$order {
  set yu = yu + $a_$j*lline1**$j
  !echo a_$j = $a_$j >> $4.par
 }

 set dimen(poly) = $(dimen(base))
 define n 0
 define i 0

 do i=0, $(dimen(base)-1) {
   set poly[$i] = $a_0
   do n=1, $order {
     set poly[$i] = poly[$i] + ($(base[$i])**$n)*$a_$n  
   }
 }

#######################################################################
debug_polyfit 0 
#######################################################################

 ptype 10 3
 limits -10 30 -10 30 box
 set xvec = {1 2 3 4 5 6 7 8 9 10}
 set yvec = {1.1 2.3 2.9 4.2 5.1 6.3 6.9 8.2 9.1 10.4}
 set skel = -10, 30, 0.01
 expand 2 nero points xvec yvec
 
 expand 0.3
 polyfit xvec yvec 1 prova skel
 blu points base poly
 polyfit xvec yvec 2 prova skel
 giallo points base poly
 polyfit xvec yvec 3 prova skel
 rosso points base poly
 polyfit xvec yvec 4 prova skel
 verde points base poly
 polyfit xvec yvec 25 prova skel
 marrone  points base poly
 




