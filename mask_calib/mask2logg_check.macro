#PLOT 4
#mask2logg_check_a 3
#mask2logg_check_b 2
#mask2logg_check_c 2
#mask2logg_check_d 3
mask2logg_check_a 3


		if ($3==1 && $2==0) {device pdfport $1_logg_pams_nocorr.pdf}
		if ($3==2 && $2==0) {device pdfland $1_logg_pams_nocorr_land.pdf}
		if ($3==1 && $2==1) {device pdfport $1_logg_pams_corr.pdf}
		if ($3==2 && $2==1) {device pdfland $1_logg_pams_corr_land.pdf}
		e reset_x11
		
		
		data $1_ewfind_logg4_calib_res1.dat
		read {obj 1.s n 2 sel 3 s2n 4 teff 5 gfeh 6 logg 7 vmic 8 logg_out 9 area1 10 area2 11 logg_tmp 12 ii_sel 13 area3 14}
		
		define zk 1
		if ($2==0) { 
		   set logg_out=logg_tmp
		   #set logg_out=logg_tmp-0.2965304554*(logg_tmp-4.4)+0.006461611949
		   define zk 1
		}
		nero
		
		
		define y_gutter 0.75
		
		limits 4400 6600 $(-0.45*$zk) $(0.45*$zk)
		ex $default_ex window 1 3 1 3
		ex $small_ex box 1 2 0 0
		blu ltype 3 hline 0.06 hline -0.06 nero ltype 0
		points teff (logg_out-logg)
		xlabel T_{\rm eff}
		
		limits 3.5 4.9 $(-0.45*$zk) $(0.45*$zk)
		ex $default_ex  window 1 3 1 2
		ex $small_ex box 1 2 0 0
		blu ltype 3 hline 0.06 hline -0.06 nero ltype 0
		points logg (logg_out-logg)
		xlabel log {\it g}
		
		limits -1.3 0.5 $(-0.45*$zk) $(0.45*$zk)
		ex $default_ex  window 1 3 1 1
		ex $small_ex box 1 2 0 0
		blu ltype 3 hline 0.06 hline -0.06 nero ltype 0
		points gfeh (logg_out-logg)
		xlabel [{\rm Fe/H}]
			
		define y_gutter 1.0
		window 1 1 1 1
		ylabel log {\it g}_{CCF} - log {\it g}_{EW}

		
		
		
		set df = logg_out-logg
		stats_med df med sigma
		echo MED $med \pm $sigma

		set df1=df if (abs(df-$med)<5*$sigma && logg_out>3.9 && logg_out<4.9 && teff > 5000)
		stats  df1 med sigma kurt
		echo MED $med \pm $sigma

                if ($3>0) {
		      device nodevice
		}


		
mask2logg_check_b 2

		if ($2==1) {device pdfport $1_logg_trend.pdf}
		if ($2==2) {device pdfland $1_logg_trend_land.pdf}
                e reset_x11

		ptype 0 0
		mr polyfit
		
		data $1_ewfind_logg4_calib_res1.dat
		read {obj 1.s n 2 sel 3 s2n 4 teff 5 gfeh 6 logg 7 vmic 8 logg_out 9 area1 10 area2 11 logg_tmp 12 ii_sel 13 area3 14}
 		
		
		#set area1 = area3


		set diff_in = area1-area2
		set diff_out = area3-area2

		
		define rain_min 0
		define rain_max 3.5
		
		
		define y_gutter 1.0
		nero
		limits 3.3 5 -0.4 0.4
		
		ex $default window 1 1 1 1
		ex $small_ex nero box 1 2 0 0
		xlabel log {\it g}_{CCF}^{uncorrected}
		ylabel {Area}_{CCF}^{uncorrected}-{Area}_{Moog}
		ex $default_ex
		
		#do ii=0,dimen(obj)-1 {
		#  # if (logg_out[$ii]>4.0 && logg_out[$ii]<=4.2) {
		#      rainbow $rain_min $rain_max $(area2[$ii])
		#      relocate $(logg_tmp[$ii]) $(diff_in[$ii]) dot
		#  # }
		#}
		
		ptype 8 3
		nero  points logg_tmp diff_in
		if (sum(abs(diff_in-diff_out))/dimen(diff_out) > 0.01) {
		   rosso points logg_tmp diff_out
		   nero
		}

		lweight 4
		
		relocate 3.4 -0.30
		
		#window 1 2 1 1
		#nero box 1 2 0 0
		##do ii=0,dimen(obj)-1 {
		##  # if (logg_out[$ii]>4.0 && logg_out[$ii]<=4.2) {
		##      rainbow $rain_min $rain_max $(area2[$ii])
		##      relocate $(logg_out[$ii]) $(diff_out[$ii]) dot
		##  # }
		##}
		#nero points logg_out diff_out
		#
		#xlabel log {\it g}_{CCF}^{corrected}
		#ylabel {Area}_{CCF}^{corrected}-{Area}_{Moog}
		
		stats_med diff_out med sigma echo \DeltaArea 1 $med $sigma
		set diff_out1 = diff_out if (abs(diff_out-$med)<5*$sigma)
		stats diff_out1 med sigma kurt echo \DeltaArea 1 $med $sigma $kurt
		
		
		#set cond = (logg_out>4.2 && logg_out<=4.4)
		#set diff1 = diff if (cond && abs(diff)<0.3)
		#stats diff1 med sigma kurt echo 4.3 $med
		
		#do ii=2,7 {
		#   set cond = (logg_out>(4.0+0.1*($ii-1)) && logg_out<=(4.0+0.1*$ii))
		#   set diff1 = diff_in if (cond && abs(diff_in)<0.3)
		#   stats diff1 med sigma kurt echo $(dimen(diff1)) $(4.0+0.1*$ii-0.05) $med
		#}
		
		#set cond = (logg_out>4.2 && logg_out<=4.4)
		#set diff1 = diff if (cond && abs(diff)<0.3)
		#stats diff1 med sigma kurt echo 4.3 $med

		#set cond = (logg_out>4.4 && logg_out<=4.6)
		#set diff1 = diff if (cond && abs(diff)<0.3)
		#stats diff1 med sigma kurt echo 4.5 $med

		#set cond = (logg_out>4.6 && logg_out<=4.8)
		#set diff1 = diff if (cond && abs(diff)<0.3)
		#stats diff1 med sigma kurt echo 4.7 $med

		define y_gutter 1.0

		set cond = (logg_tmp >3.5 && logg_tmp<5.0 )
		set xx1 =  (logg_tmp-4.4000000) if (cond)
		set yy1 =  diff_in if (cond)
		
 		#set xx1 = logg_tmp-4.4000000
		#set yy1 = diff_in
		#set cond = (logg_tmp >3.0 && abs( yy1-$a*xx1-$b)<0.75  )
		#set xx1 = (logg_tmp-4.4000000) if (cond)
		#set yy1 = diff_in if (cond)
		
		
		lsq xx1 yy1
		set xx2 = 3,6,0.01
		set xx3 = xx2 - 4.40000000
		
		set yy2 = $a*(xx2-4.4000000) + $b
		verde connect xx2 yy2
		echo Linear Fit coeff:  $a $b 
		
		
		polyfit xx1 yy1 2 aaa xx3
		magenta connect xx2 poly
		set yy3 = $a_0 + $a_1*(xx1) + $a_2*(xx1)**2
		set diff = yy3 - yy1
		stats diff mean sigma kurt
		echo SIGMA $sigma

		set cond = ( abs(diff)<3*$sigma)
		set xx4 = xx1 if (cond)
		set yy4 = yy1 if (cond)
		
		polyfit xx4 yy4 2 aaa xx3
		rosso connect xx2 poly
		set yy5 = $a_0 + $a_1*(xx4) + $a_2*(xx4)**2
		set diff = yy4 - yy5
		stats diff mean sigma kurt
		echo SIGMA $sigma
		
		echo Quadratic fit coeff: $a_0 $a_1 $a_2
		if ($2>0) { 
		   device nodevice 
		}

mask2logg_check_c 2	

		if ($2==1) {device pdfport $1_logg_compare.pdf}
		if ($2==2) {device pdfland $1_logg_compare_land.pdf}
                e reset_x11
		
		
		data $1_ewfind_logg4_calib_res3.dat
		read {idn 1 calib 2 teff 3 gfeh 4 logg 5 frac1 6 frac2 7}
		
		
                define teff_min 4400
                define teff_max 6400
                define gfeh_min -1.0
                define gfeh_max  0.5
                define teff_reloc 6500
                define gfeh_reloc -0.8
                limits $gfeh_min $gfeh_max $teff_min $teff_max

                define x_gutter 0.5

		set cond = (idn==0 && calib==0)
		set teff_i = teff if (cond)
		set gfeh_i = gfeh if (cond)
		set frac1_i = frac1 if (cond)
		set frac2_i = frac2 if (cond)

		vecminmax frac1_i rain_min rain_max
		
		ex $default_ex window 2 7 1 2:7
		ex $bigger_ex
		do ii=0,dimen(teff_i)-1 {
		   rainbow $rain_min $rain_max  $(frac1_i[$ii])
		   relocate  $(gfeh_i[$ii]) $(teff_i[$ii]) dot
		}
		ex $small_ex nero box 1 1 0 0 
		
 		ex $default_ex window 2 7 2 2:7
		ex $bigger_ex
		do ii=0,dimen(teff_i)-1 {
		   rainbow $rain_min $rain_max  $(frac2_i[$ii])
		   relocate  $(gfeh_i[$ii]) $(teff_i[$ii]) dot
		}
		ex $small_ex nero box 1 1 0 0 
		define x_gutter 1.0
		
		
                ex $default_ex window 1 7 1 2:7
                ylabel T_{\rm eff}
                xlabel [{\rm Fe/H}]

		window 1 7 1 1
                rainbow_bar
		nero box 1 3 0 3 
                xlabel F_C
		
		if ($2>0) { 
		   device nodevice 
		}
		
mask2logg_check_d 3
		
                e reset_x11
		

		if ($3==1) {device pdfport $1_logg_compare_$2.pdf}
		if ($3==2) {device pdfland $1_logg_compare_$2_land.pdf}
                e reset_x11
		
		data $1_ewfind_logg4_calib_res3.dat
		read {idn 1 calib 2 teff 3 gfeh 4 logg 5 frac1 6 frac2 7}
		
                define teff_min 4400
                define teff_max 6400
                define gfeh_min -1.0
                define gfeh_max  0.5
                define teff_reloc 6500
                define gfeh_reloc -0.8
                limits $gfeh_min $gfeh_max $teff_min $teff_max

                define x_gutter 0.5

		set cond = (idn==2 && calib==$2)
		set teff_i = teff if (cond)
		set gfeh_i = gfeh if (cond)
		set frac1_i = frac1 if (cond)
		set frac2_i = frac2 if (cond)
		vecminmax frac1_i rain_min rain_max

		window 2 7 1 2:7
		ex $bigger_ex
		do ii=0,dimen(teff_i)-1 {
		   rainbow $rain_min $rain_max  $(frac1_i[$ii])
		   relocate  $(gfeh_i[$ii]) $(teff_i[$ii]) dot
		}
		ex $default_ex

		nero box 1 1 0 0 
		
		window 2 7 2 2:7
		ex $bigger_ex
		do ii=0,dimen(teff_i)-1 {
		   rainbow $rain_min $rain_max  $(frac2_i[$ii])
		   relocate  $(gfeh_i[$ii]) $(teff_i[$ii]) dot
		}
		ex $default_ex

		nero box 1 1 0 0 
		define x_gutter 1.0
		
		
                window 1 7 1 2:7
                ylabel T_{\rm eff}
                xlabel [{\rm Fe/H}]

		window 1 7 1 1
                rainbow_bar
		nero box 1 3 0 3 
                xlabel F_C

		if ($3>0) { 
		   device nodevice 
		}
